"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    accepted: 'The :attribute must be accepted.',
    accepted_if: 'The :attribute must be accepted when :other is :value.',
    after: 'The :attribute must be a date after :date.',
    after_or_equal: 'The :attribute must be a date after or equal to :date.',
    alpha: 'The :attribute must only contain letters.',
    alpha_dash: 'The :attribute must only contain letters, numbers, dashes and underscores.',
    alpha_num: 'The :attribute must only contain letters and numbers.',
    array: 'The :attribute must be an array.',
    before: 'The :attribute must be a date before :date.',
    before_or_equal: 'The :attribute must be a date before or equal to :date.',
    between: {
        number: 'The :attribute must be between :min and :max.',
        string: 'The :attribute must be between :min and :max characters.',
        array: 'The :attribute must have between :min and :max items.',
        object: 'The :attribute must have between :min and :max items.',
    },
    boolean: 'The :attribute field must be true or false.',
    confirmed: 'The :attribute confirmation does not match.',
    date: 'The :attribute is not a valid date.',
    date_equals: 'The :attribute must be a date equal to :date.',
    declined: 'The :attribute must be declined.',
    declined_if: 'The :attribute must be declined when :other is :value.',
    different: 'The :attribute and :other must be different.',
    digits: 'The :attribute must be :digits digits.',
    digits_between: 'The :attribute must be between :min and :max digits.',
    email: 'The :attribute must be a valid email address.',
    ends_with: 'The :attribute must end with one of the following: :values.',
    gt: {
        number: 'The :attribute must be greater than :value.',
        string: 'The :attribute must be greater than :value characters.',
        array: 'The :attribute must have more than :value items.',
        object: 'The :attribute must have more than :value items.',
    },
    gte: {
        number: 'The :attribute must be greater than or equal :value.',
        string: 'The :attribute must be greater than or equal :value characters.',
        array: 'The :attribute must have :value items or more.',
        object: 'The :attribute must have :value items or more.',
    },
    in: 'The selected :attribute is invalid.',
    integer: 'The :attribute must be an integer.',
    json: 'The :attribute must be a valid JSON string',
    lt: {
        number: 'The :attribute must be less than :value.',
        string: 'The :attribute must be less than :value characters.',
        array: 'The :attribute must have less than :value items.',
        object: 'The :attribute must have less than :value items.',
    },
    lte: {
        number: 'The :attribute must be less than or equal :value.',
        string: 'The :attribute must be less than or equal :value characters.',
        array: 'The :attribute must have :value items or less.',
        object: 'The :attribute must have :value items or less.',
    },
    max: {
        number: 'The :attribute must not be greater than :max.',
        string: 'The :attribute must not be greater than :max characters.',
        array: 'The :attribute must not have more than :max items.',
        object: 'The :attribute must not have more than :max items.',
    },
    min: {
        number: 'The :attribute must be at least :min.',
        string: 'The :attribute must be at least :min characters.',
        array: 'The :attribute must have at least :min items.',
        object: 'The :attribute must have at least :min items.',
    },
    not_in: 'The selected :attribute is invalid.',
    not_regex: 'The :attribute format is invalid.',
    numeric: 'The :attribute must be a number.',
    object: 'The :attribute must be an object.',
    password: {
        letter: 'The :attribute must contain at least one letter.',
        letters: 'The :attribute must contain at least :amount letters.',
        lower_case: 'The :attribute must contain at least one lowercase letter.',
        lower_cases: 'The :attribute must contain at least :amount lowercase letters.',
        number: 'The :attribute must contain at least one number.',
        numbers: 'The :attribute must contain at least :amount numbers.',
        symbol: 'The :attribute must contain at least one symbol.',
        symbols: 'The :attribute must contain at least :amount symbols.',
        upper_case: 'The :attribute must contain at least one uppercase letter.',
        upper_cases: 'The :attribute must contain at least :amount uppercase letters.',
    },
    present: 'The :attribute field must be present.',
    regex: 'The :attribute format is invalid.',
    required: 'The :attribute field is required.',
    required_if: 'The :attribute field is required when :other is :value.',
    required_unless: 'The :attribute field is required unless :other is in :values.',
    required_with: 'The :attribute field is required when :values is present.',
    required_with_all: 'The :attribute field is required when :values are present.',
    required_without: 'The :attribute field is required when :values is not present.',
    required_without_all: 'The :attribute field is required when none of :values are present.',
    starts_with: 'The :attribute must start with one of the following: :values.',
    same: 'The :attribute and :other must match.',
    size: {
        number: 'The :attribute must be :size.',
        string: 'The :attribute must be :size characters.',
        array: 'The :attribute must contain :size items.',
        object: 'The :attribute must contain :size items.',
    },
    string: 'The :attribute must be a string.',
    url: 'The :attribute must have a valid URL format.',
};
